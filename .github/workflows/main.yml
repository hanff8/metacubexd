name: release

on:
  push:
    branches:
      - main

jobs:
  detect-upstream-updates:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Add upstream remote
        run: git remote add upstream https://github.com/MetaCubeX/metacubexd.git
        # 确保替换 <UPSTREAM_REPO_URL> 为上游仓库的URL

      - name: Fetch upstream
        run: git fetch upstream

      - name: Check for changes
        id: check-changes
        run: |
          git checkout main
          git pull origin main
          if git diff --quiet main upstream/main; then echo "no changes"; else echo "changes detected"; fi

      - name: Create PR if changes detected
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        if: steps.check-changes.outputs.changes == 'changes detected'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: merge upstream changes'
          title: 'Merge upstream changes'
          body: 'Automated PR to merge upstream changes'
          branch: 'merge-upstream-changes'
          labels: 'automated pr'
          base: 'main'

  auto-merge-pr:
    runs-on: ubuntu-latest
    needs: detect-upstream-updates
    if: ${{ needs.detect-upstream-updates.outputs.pr-created }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Merge PR
        uses: actions/github-script@v6
        with:
          script: |
            const pr_url = '${{ needs.detect-upstream-updates.outputs.pr-created }}';
            const pr_number = pr_url.split('/').pop();
            const { data: pr } = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number,
            });

            if (pr.state === 'open') {
              await github.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number,
                merge_method: 'merge',
              });
            }
    
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}

    steps:
      - name: release-please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: node

  release-assets:
    needs: release-please
    runs-on: ubuntu-latest
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version: latest

      - name: install dependencies
        run: pnpm install

      - name: build
        run: pnpm build

      - name: compress dist
        run: zip -r compressed-dist.zip dist
      
      - name: Bump version and create tag
        id: version
        run: |
          NEW_TAG=$(npm version patch -m "chore: release %s")
          echo "::set-output name=tag::$NEW_TAG"
      
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: compressed-dist.zip
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          body: Automated release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
